{"ast":null,"code":"var _jsxFileName = \"/home/gusta/Workspace/Go-Barber/gobarber-web/src/components/input/index.tsx\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useField } from '@unform/core';\nimport { Container } from './styles';\n\nconst Input = ({\n  name,\n  icon: Icon,\n  ...rest\n}) => {\n  const [isFocused, setIsFocuses] = useState(false);\n  const {\n    fieldName,\n    defaultValue,\n    error,\n    registerField\n  } = useField(name);\n  const inputRef = useRef(null);\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: 'value'\n    });\n  }, [fieldName, registerField]);\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, Icon && /*#__PURE__*/React.createElement(Icon, {\n    size: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 16\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", Object.assign({\n    defaultValue: defaultValue,\n    ref: inputRef\n  }, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  })));\n};\n\nexport default Input;","map":{"version":3,"sources":["/home/gusta/Workspace/Go-Barber/gobarber-web/src/components/input/index.tsx"],"names":["React","useEffect","useRef","useState","useField","Container","Input","name","icon","Icon","rest","isFocused","setIsFocuses","fieldName","defaultValue","error","registerField","inputRef","ref","current","path"],"mappings":";AAAA,OAAOA,KAAP,IAAqCC,SAArC,EAAgDC,MAAhD,EAAwDC,QAAxD,QAAwE,OAAxE;AAEA,SAASC,QAAT,QAAyB,cAAzB;AACA,SAASC,SAAT,QAA0B,UAA1B;;AAOA,MAAMC,KAA2B,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,IAAI,EAAEC,IAAd;AAAoB,KAAGC;AAAvB,CAAD,KAAmC;AACrE,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM;AAAEU,IAAAA,SAAF;AAAaC,IAAAA,YAAb;AAA2BC,IAAAA,KAA3B;AAAkCC,IAAAA;AAAlC,MAAoDZ,QAAQ,CAACG,IAAD,CAAlE;AACA,QAAMU,QAAQ,GAAGf,MAAM,CAAC,IAAD,CAAvB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,aAAa,CAAC;AACZT,MAAAA,IAAI,EAAEM,SADM;AAEZK,MAAAA,GAAG,EAAED,QAAQ,CAACE,OAFF;AAGZC,MAAAA,IAAI,EAAE;AAHM,KAAD,CAAb;AAKD,GANQ,EAMN,CAACP,SAAD,EAAYG,aAAZ,CANM,CAAT;AAQA,sBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGP,IAAI,iBAAI,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAE,EAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADX,eAEE;AAAO,IAAA,YAAY,EAAEK,YAArB;AAAmC,IAAA,GAAG,EAAEG;AAAxC,KAAsDP,IAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFF,CADF;AAMD,CAnBD;;AAoBA,eAAeJ,KAAf","sourcesContent":["import React, { InputHTMLAttributes, useEffect, useRef, useState } from 'react';\nimport { IconBaseProps } from 'react-icons';\nimport { useField } from '@unform/core';\nimport { Container } from './styles';\n\ninterface InputProps extends InputHTMLAttributes<HTMLInputElement> {\n  name: string;\n  icon?: React.ComponentType<IconBaseProps>;\n}\n\nconst Input: React.FC<InputProps> = ({ name, icon: Icon, ...rest }) => {\n  const [isFocused, setIsFocuses] = useState(false);\n  const { fieldName, defaultValue, error, registerField } = useField(name);\n  const inputRef = useRef(null);\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: 'value',\n    });\n  }, [fieldName, registerField]);\n\n  return (\n    <Container>\n      {Icon && <Icon size={20} />}\n      <input defaultValue={defaultValue} ref={inputRef} {...rest} />\n    </Container>\n  );\n};\nexport default Input;\n"]},"metadata":{},"sourceType":"module"}